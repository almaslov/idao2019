#include <cmath>
#include <tuple>


float err(float x, float ex) {
    return ex - x;
}

static float ez[] = {15270., 16470., 17670., 18870.};

auto err_z(float z0, float z1, float z2, float z3) {
    return std::tuple<float, float, float, float>(
        ez[0] - z0,
        ez[1] - z1,
        ez[2] - z2,
        ez[3] - z3
    );
}

float clip(float x, float l, float r) {
    if (std::isnan(x)) {
        return x;
    }
    if (x < l) {
        return l;
    }
    if (x > r) {
        return r;
    }
    return x;
}

auto refraction_angles(float ex0, float ey0,
                       float ex1, float ey1,
                       float x0, float y0, float z0,
                       float x1, float y1, float z1,
                       float x2, float y2, float z2,
                       float x3, float y3, float z3) {
    float vx0 = ex1 - ex0, vy0 = ey1 - ey0, vz0 = z1 - z0;
    float vx1 = x1 - x0, vy1 = y1 - y0, vz1 = z1 - z0;
    float vx2 = x2 - x1, vy2 = y2 - y1, vz2 = z2 - z1;
    float vx3 = x3 - x2, vy3 = y3 - y2, vz3 = z3 - z2;

    std::tuple<float, float, float> res;
    if (std::isnan(vx1)) {
        vx1 = vx0, vy1 = vy0, vz1 = vz0;
        std::get<0>(res) = NAN;
    } else {
        float norm0 = sqrtf(vx0 * vx0 + vy0 * vy0 + vz0 * vz0);
        float norm1 = sqrtf(vx1 * vx1 + vy1 * vy1 + vz1 * vz1);
        float sc_pr = vx0 * vx1 + vy0 * vy1 + vz0 * vz1;
        std::get<0>(res) = acosf(clip(sc_pr / norm0 / norm1, -1, 1)) / M_PI * 180;
    }

    if (std::isnan(vx2)) {
        vx2 = vx1, vy2 = vy1, vz2 = vz1;
        std::get<1>(res) = NAN;
    } else {
        float norm1 = sqrtf(vx1 * vx1 + vy1 * vy1 + vz1 * vz1);
        float norm2 = sqrtf(vx2 * vx2 + vy2 * vy2 + vz2 * vz2);
        float sc_pr = vx2 * vx1 + vy2 * vy1 + vz2 * vz1;
        std::get<1>(res) = acosf(clip(sc_pr / norm2 / norm1, -1, 1)) / M_PI * 180;
    }

    if (std::isnan(vx3)) {
        std::get<2>(res) = NAN;
    } else {
        float norm2 = sqrtf(vx2 * vx2 + vy2 * vy2 + vz2 * vz2);
        float norm3 = sqrtf(vx3 * vx3 + vy3 * vy3 + vz3 * vz3);
        float sc_pr = vx2 * vx3 + vy2 * vy3 + vz2 * vz3;
        std::get<2>(res) = acosf(clip(sc_pr / norm2 / norm3, -1, 1)) / M_PI * 180;
    }

    return res;
}


float mse(float x0, float y0, float ex0, float ey0, float dx0, float dy0,
          float x1, float y1, float ex1, float ey1, float dx1, float dy1,
          float x2, float y2, float ex2, float ey2, float dx2, float dy2,
          float x3, float y3, float ex3, float ey3, float dx3, float dy3) {
    float acc = 0;
    int n = 0;
#define accumulate(val) if (!std::isnan(val)) {acc += (val) * (val); n += 1;}
    accumulate((x0 - ex0) / dx0 / 2)
    accumulate((y0 - ey0) / dy0 / 2)
    accumulate((x1 - ex1) / dx1 / 2)
    accumulate((y1 - ey1) / dy1 / 2)
    accumulate((x2 - ex2) / dx2 / 2)
    accumulate((y2 - ey2) / dy2 / 2)
    accumulate((x3 - ex3) / dx3 / 2)
    accumulate((y3 - ey3) / dy3 / 2)
#undef accumulate
    return acc / n;
}

float normed_err(float x, float ex, float edx) {
    return (x - ex) / sqrtf(edx);
}

template<size_t I>
float probability_hit_detector(float p)
{
    static float alpha[] = {0.0260, 0.0021, 0.0015, 0.0008};
    static float beta[] = {2040., 2387., 3320., 3903.};

    float t = powf(alpha[I] * (p - beta[I]), I + 1);
    return t / (1 + t);
}


float bins[] = {0.001991750748604536, 0.021991750748604537, 0.041991750748604534, 0.06199175074860453,
                0.08199175074860454, 0.10199175074860455, 0.12199175074860454, 0.14199175074860454, 0.16199175074860453,
                0.18199175074860452, 0.20199175074860454, 0.22199175074860453, 0.24199175074860452, 0.26199175074860453,
                0.28199175074860455, 0.3019917507486045, 0.32199175074860453, 0.34199175074860455, 0.3619917507486045,
                0.38199175074860453, 0.40199175074860455, 0.4219917507486045, 0.44199175074860453, 0.46199175074860455,
                0.4819917507486045, 0.5019917507486046, 0.5219917507486046, 0.5419917507486046, 0.5619917507486046,
                0.5819917507486045, 0.6019917507486046, 0.6219917507486046, 0.6419917507486046, 0.6619917507486046,
                0.6819917507486046, 0.7019917507486046, 0.7219917507486046, 0.7419917507486046, 0.7619917507486046,
                0.7819917507486046, 0.8019917507486046, 0.8219917507486046, 0.8419917507486046, 0.8619917507486046,
                0.8819917507486046, 0.9019917507486046, 0.9219917507486046, 0.9419917507486046, 0.9619917507486045,
                0.9819917507486046, 1.0, 1.04, 1.08, 1.12, 1.1600000000000001,
                1.2000000000000002, 1.2400000000000002, 1.2800000000000002, 1.3200000000000003, 1.3600000000000003,
                1.4000000000000004, 1.4400000000000004, 1.4800000000000004, 1.5200000000000005, 1.5600000000000005,
                1.6000000000000005, 1.6400000000000006, 1.6800000000000006, 1.7200000000000006, 1.7600000000000007,
                1.8000000000000007, 1.8400000000000007, 1.8800000000000008, 1.9200000000000008, 1.9600000000000009,
                2.000000000000001, 2.040000000000001, 2.080000000000001, 2.120000000000001, 2.160000000000001,
                2.200000000000001, 2.240000000000001, 2.280000000000001, 2.320000000000001, 2.360000000000001,
                2.4000000000000012, 2.4400000000000013, 2.4800000000000013, 2.5200000000000014, 2.5600000000000014,
                2.6000000000000014, 2.6400000000000015, 2.6800000000000015, 2.7200000000000015, 2.7600000000000016,
                2.8000000000000016, 2.8400000000000016, 2.8800000000000017, 2.9200000000000017, 2.9600000000000017,
                3.0, 3.1, 3.2, 3.3000000000000003, 3.4000000000000004, 3.5000000000000004, 3.6000000000000005,
                3.7000000000000006, 3.8000000000000007, 3.900000000000001, 4.000000000000001, 4.100000000000001,
                4.200000000000001, 4.300000000000001, 4.400000000000001, 4.500000000000002, 4.600000000000001,
                4.700000000000001, 4.800000000000002, 4.900000000000002, 5.000000000000002, 5.100000000000001,
                5.200000000000002, 5.3000000000000025, 5.400000000000002, 5.500000000000002, 5.600000000000002,
                5.700000000000003, 5.8000000000000025, 5.900000000000002, 6.000000000000003, 6.100000000000003,
                6.200000000000003, 6.3000000000000025, 6.400000000000003, 6.5000000000000036, 6.600000000000003,
                6.700000000000003, 6.800000000000003, 6.900000000000004, 7.0000000000000036, 7.100000000000003,
                7.200000000000004, 7.300000000000004, 7.400000000000004, 7.5000000000000036, 7.600000000000004,
                7.700000000000005, 7.800000000000004, 7.900000000000004, 8.000000000000004, 8.100000000000005,
                8.200000000000005, 8.300000000000004, 8.400000000000006, 8.500000000000005, 8.600000000000005,
                8.700000000000005, 8.800000000000004, 8.900000000000006, 9.000000000000005, 9.100000000000005,
                9.200000000000006, 9.300000000000006, 9.400000000000006, 9.500000000000005, 9.600000000000005,
                9.700000000000006, 9.800000000000006, 9.900000000000006, 10.0, 10.4, 10.8, 11.200000000000001,
                11.600000000000001, 12.000000000000002, 12.400000000000002, 12.800000000000002, 13.200000000000003,
                13.600000000000003, 14.000000000000004, 14.400000000000004, 14.800000000000004, 15.200000000000005,
                15.600000000000005, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0,
                29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 36.0, 38.0, 40.0, 42.0, 44.0, 46.0, 48.0, 50.0, 52.0, 54.0,
                56.0, 58.0, 60.0, 62.0, 64.0, 66.0, 71.0, 76.0, 81.0, 86.0, 91.0, 96.0, 101.0, 106.0, 111.0, 116.0,
                120.0, 162.21986126220702, 204.43972252441407
};


float pdf0[] = {
    1817, 5501, 7454, 8544, 8281, 8088, 7744, 7123, 6698, 6095, 5524,
    4951, 4461, 4164, 3848, 3531, 3316, 3061, 2762, 2646, 2548, 2423,
    2248, 2264, 2039, 2091, 1850, 1816, 1783, 1728, 1591, 1590, 1564,
    1493, 1408, 1379, 1323, 1347, 1208, 1280, 1119, 1180, 1130, 1074,
    1130, 1056, 1052, 1000,  973,  844, 1868, 1747, 1667, 1638, 1580,
    1521, 1551, 1439, 1343, 1429, 1258, 1221, 1202, 1179, 1177, 1160,
    1110, 1086, 1068, 1009,  970, 1033,  950,  943,  955,  929,  934,
    894,  821,  868,  852,  834,  823,  767,  781,  717,  750,  720,
    761,  696,  698,  728,  726,  685,  673,  673,  615,  581,  617,
    661, 1545, 1516, 1405, 1398, 1386, 1314, 1306, 1291, 1210, 1211,
    1175, 1186, 1087, 1099, 1089, 1058, 1099,  990, 1042, 1019, 1033,
    1007,  951,  912,  930,  909,  916,  867,  894,  877,  884,  872,
    883,  833,  860,  908,  845,  839,  850,  883,  853,  850,  858,
    771,  780,  768,  844,  838,  779,  794,  817,  756,  784,  786,
    744,  757,  817,  795,  755,  727,  725,  755,  736,  773,  723,
    706,  756,  740,  715,  764, 2802, 2743, 2786, 2684, 2582, 2648,
    2599, 2597, 2490, 2336, 2372, 2433, 2336, 2331, 2290, 5528, 5207,
    5032, 4866, 4659, 4398, 4264, 3946, 3827, 3532, 3476, 3301, 3121,
    2970, 2931, 2767, 2655, 2477, 4621, 4275, 3808, 3374, 3110, 2855,
    2556, 2342, 2048, 1796, 1657, 1541, 1389, 1157, 1082,  977, 1970,
    1557, 1159,  858,  675,  443,  335,  248,  214,  141,   80,  254,
    17
}, sum_pdf0 = 421218;
float pdf1[] = {
    7364, 21392, 28663, 32346, 31831, 30648, 28916, 27534, 24772,
    22241, 19775, 17271, 15454, 13657, 12201, 11153, 10041,  9131,
    8366,  7709,  7130,  6567,  6022,  5769,  5347,  4991,  4746,
    4301,  4146,  3902,  3695,  3540,  3236,  3218,  2961,  2908,
    2707,  2579,  2473,  2303,  2349,  2108,  2129,  2087,  1941,
    1890,  1726,  1664,  1637,  1369,  2947,  2726,  2664,  2448,
    2389,  2198,  2057,  1929,  1834,  1719,  1631,  1557,  1499,
    1406,  1335,  1194,  1221,  1126,  1084,  1039,  1062,   980,
    888,   849,   834,   765,   776,   751,   776,   725,   711,
    650,   611,   579,   572,   542,   540,   558,   528,   502,
    505,   473,   462,   445,   385,   402,   425,   393,   391,
    391,   884,   823,   736,   760,   698,   671,   634,   613,
    556,   522,   525,   481,   478,   461,   415,   417,   395,
    361,   384,   353,   388,   325,   313,   334,   315,   307,
    307,   254,   270,   293,   248,   246,   258,   206,   215,
    221,   185,   205,   180,   201,   194,   210,   203,   171,
    186,   192,   167,   183,   168,   171,   185,   158,   161,
    164,   158,   150,   153,   130,   143,   144,   138,   146,
    115,   131,   139,   136,   123,   126,   132,   117,   427,
    422,   444,   403,   426,   370,   378,   364,   345,   333,
    318,   336,   308,   277,   241,   701,   659,   628,   581,
    562,   516,   450,   528,   465,   425,   441,   385,   350,
    378,   369,   321,   332,   327,   609,   609,   526,   533,
    454,   399,   383,   334,   355,   279,   266,   241,   217,
    244,   203,   185,   390,   290,   228,   173,   115,   122,
    72,    54,    49,    40,    22,    66,     2
}, sum_pdf1 = 578782;


float dll(float mse) {
    size_t bin;
    for (bin = 1; bin < sizeof(bins); ++bin)
        if (mse <= bins[bin])
            break;
    bin -= 1;

    float prob0 = pdf0[bin] / sum_pdf0;
    float prob1 = pdf1[bin] / sum_pdf1;

    return logf(prob1 / prob0);
}

auto mass(float ex0, float ey0,
          float ex1, float ey1,
          float x0, float y0, float z0, float t0,
          float x1, float y1, float z1, float t1,
          float x2, float y2, float z2, float t2,
          float x3, float y3, float z3, float t3,
          float p, float p_tr) {
    float rx = ex1 - ex0, ry = ey1 - ey0, rz = ez[1] - ez[0];
    float rnorm = sqrtf(rx * rx + ry * ry + rz * rz);
    rx /= rnorm;
    ry /= rnorm;
    rz /= rnorm;

    float alpha = -ez[0] / rz;
    float zero_x = ex0 + alpha * rx;
    float zero_y = ey0 + alpha * ry;

    x0 -= zero_x; y0 -= zero_y;
    x1 -= zero_x; y1 -= zero_y;
    x2 -= zero_x; y2 -= zero_y;
    x3 -= zero_x; y3 -= zero_y;


#define accumulate(val) if (!std::isnan(val)) {acc += (val); n += 1;}
    float acc = 0; size_t n = 0;
    accumulate(x0 / t0)
    accumulate(x1 / t1)
    accumulate(x2 / t2)
    accumulate(x3 / t3)
    float vx = acc / n;

    acc = 0; n = 0;
    accumulate(y0 / t0)
    accumulate(y1 / t1)
    accumulate(y2 / t2)
    accumulate(y3 / t3)
    float vy = acc / n;

    acc = 0; n = 0;
    accumulate(z0 / t0)
    accumulate(z1 / t1)
    accumulate(z2 / t2)
    accumulate(z3 / t3)
    float vz = acc / n;
#undef accumulate

    float v = sqrtf(vx * vx + vy * vy + vz * vz);
    float v_tr = sqrtf(vx * vx + vy * vy);

    return std::make_tuple(v, v_tr, p / v, p_tr / v_tr);
}

